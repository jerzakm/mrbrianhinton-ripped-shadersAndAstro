<style>
  canvas {
    position:fixed;
    z-index: -1;
  }
</style>

<canvas/>

<script id="fs" type="x-shader/x-fragment">
precision highp float;

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

void main(void)
{
  vec2 uv = -1.0 + 2.0*gl_FragCoord.xy / resolution.xy;
	uv.x *=  resolution.x / resolution.y;

	vec3 color = vec3(1.0);

	for( int i=0; i<64; i++ )
	{
		float pha =      sin(float(i)*546.13+1.0)*0.5 + 0.5;
		float siz = pow( sin(float(i)*651.74+5.0)*0.5 + 0.5, 4.0 );
		float pox =      sin(float(i)*321.55+4.1) * resolution.x / resolution.y;

		float rad = 0.1 + 0.5*siz+sin(time/6.+pha*500.0+siz)/20.0;
		vec2  pos = vec2( pox+sin(time/10.+pha+siz), -1.0-rad + (2.0+2.0*rad)
						 *mod(pha+0.1*(time/5.0)*(0.2+0.8*siz),1.0));
		float dis = length( uv - pos );
		vec3  col = mix( vec3(0.6*sin(time/8.),0.2,0.0),
						vec3(1.0*sin(time/10.0),0.4,0.9),
						0.5+0.5*sin(float(i)*1.0+1.9));
		float f = length(uv-pos)/rad;
		f = sqrt(clamp(1.0+(sin((time/7.0)+pha*500.0+siz)*0.5)-f*f,0.0,1.0));
		color -= col.zyx *(1.0-smoothstep( rad*0.95, rad, dis )) * f;
	}

  float m = max(color.r, max(color.g,color.b));
  gl_FragColor = vec4(color,m);
}

</script>

<script id="vs" type="x-shader/x-vertex">
  attribute vec4 vPosition;
  void main (void) {
  gl_Position = vPosition;
  }
</script>

<script>
  const canvas = document.querySelector('canvas');
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  let timeUni;
  let timeValue = Date.now();

  function initShaders (gl, vertexShaderId, fragmentShaderId) {
    const vertexEl = document.querySelector(vertexShaderId);
    const vertexShader = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(vertexShader, vertexEl.text);
    gl.compileShader(vertexShader);

    const fragmentEl = document.querySelector(fragmentShaderId);
    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fragmentShader, fragmentEl.text);
    gl.compileShader(fragmentShader);

    const program = gl.createProgram();
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    gl.useProgram(program);

    return program;
  }

  function initGraphics () {
    gl = canvas.getContext('webgl');
    const width = canvas.width;
    const height = canvas.height;
    gl.viewport(0, 0, width, height);

    const program = initShaders(gl, '#vs', '#fs');
    const buffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);

    gl.bufferData(
      gl.ARRAY_BUFFER,
      new Float32Array([-1, 1, -1, -1, 1, -1, 1, 1]),
      gl.STATIC_DRAW
    );

    const vPosition = gl.getAttribLocation(program, 'vPosition');
    gl.vertexAttribPointer(vPosition, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(vPosition);

    timeUni = gl.getUniformLocation(program, 'time');
    const resolution = new Float32Array([canvas.width, canvas.height]);
    gl.uniform2fv(gl.getUniformLocation(program, 'resolution'), resolution);

  }

  function render () {
    gl.uniform1f(timeUni, (Date.now() - timeValue) / 1000);;
    gl.drawArrays(gl.TRIANGLE_FAN, 0, 4);
    requestAnimationFrame(render);
  }

  initGraphics();
  render();
</script>
